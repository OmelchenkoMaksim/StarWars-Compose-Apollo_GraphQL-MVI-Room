type Query {
    allPeople(after: String, first: Int): PeopleConnection
    allPlanets(after: String, first: Int): PlanetsConnection
    allStarships(after: String, first: Int): StarshipsConnection
}

type PeopleConnection {
    edges: [PeopleEdge]
    pageInfo: PageInfo
}

type PeopleEdge {
    cursor: String
    node: Person
}

type Person {
    id: ID!
    name: String!
    filmConnection: FilmConnection
}

type FilmConnection {
    totalCount: Int!
}

type PlanetsConnection {
    edges: [PlanetsEdge]
    pageInfo: PageInfo
}

type PlanetsEdge {
    cursor: String
    node: Planet
}

type Planet {
    id: ID!
    name: String!
    climates: [String]
}

type StarshipsConnection {
    edges: [StarshipsEdge]
    pageInfo: PageInfo
}

type StarshipsEdge {
    cursor: String
    node: Starship
}

type Starship {
    id: ID!
    name: String!
    model: String
}

type PageInfo {
    endCursor: String
    hasNextPage: Boolean
}
